import streamlit as st
import os
import sys
import json
import glob
from pathlib import Path
import base64
import subprocess
import platform
import shutil
import time
import random

# Adiciona o diret√≥rio pai ao sys.path para permitir importa√ß√µes
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))
from bdtdfinder.BDTDReviewer import BDTDReviewer


def load_markdown_file(file_path):
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            return f.read()
    except Exception as e:
        return f"Error loading markdown file: {str(e)}"


def get_pdf_download_link(pdf_path):
    with open(pdf_path, "rb") as f:
        bytes_data = f.read()
    b64 = base64.b64encode(bytes_data).decode()
    filename = os.path.basename(pdf_path)
    return f'<a href="data:application/pdf;base64,{b64}" download="{filename}">Download {filename}</a>'


def find_pdfs(directory):
    pdfs = []
    for root, dirs, files in os.walk(directory):
        for file in files:
            if file.lower().endswith('.pdf'):
                full_path = os.path.join(root, file)
                pdfs.append({
                    'path': full_path,
                    'name': file,
                    'size': os.path.getsize(full_path) / (1024 * 1024),  # Tamanho em MB
                    'folder': os.path.basename(root)
                })
    return pdfs


def main():
    st.set_page_config(
        page_title="BDTD - Agente de Revis√£o",
        page_icon="üìö",
        layout="wide",
        initial_sidebar_state="collapsed"
    )

    # --- CSS customizado para background gradiente e melhorias ---
    st.markdown("""
    <style>
    /* Gradiente no fundo da aplica√ß√£o */
    .stApp {
        background: linear-gradient(to bottom right, #ffe2e2, #fafafa);
    }
    /* Ajusta cont√™iner principal */
    .main {
        max-width: 1200px;
        margin: 0 auto;
        padding: 1rem;
        background-color: rgba(255, 255, 255, 0.8);
        border-radius: 12px;
        box-shadow: 2px 2px 20px rgba(0, 0, 0, 0.1);
    }
    /* T√≠tulo estilizado */
    h1 {
        color: #B12A2A !important;
        font-weight: 700 !important;
        text-shadow: 1px 1px 2px rgba(0,0,0,0.2);
    }
    /* Centraliza alguns elementos */
    .centered-search {
        display: flex; 
        justify-content: center; 
        margin-top: 3rem; 
        margin-bottom: 2rem;
    }
    .centered-search > div { width: 80%; }
    /* Inputs de texto personalizados */
    div[data-baseweb="input"] > div > input {
        width: 100% !important;
        padding: 0.75rem;
        font-size: 1.1rem;
        border-radius: 8px;
        border: 1px solid #ccc;
        transition: border 0.3s ease;
    }
    div[data-baseweb="input"] > div > input:focus {
        border: 1px solid #E91E63;
    }
    </style>
    """, unsafe_allow_html=True)

    # --- Dicion√°rio de idiomas com emojis ---
    idiomas = {
        "pt-BR": "üáßüá∑ Portugu√™s (Brasil)",
        "en-US": "üá∫üá∏ Ingl√™s (EUA)",
        "es-ES": "üá™üá∏ Espanhol (Espanha)",
        "fr-FR": "üá´üá∑ Franc√™s (Fran√ßa)",
        "it-IT": "üáÆüáπ Italiano (It√°lia)",
        "ru-RU": "üá∑üá∫ Russo (R√∫ssia)"
        # "ar-AE": "üá¶üá™ √Årabe (Emirados)",
        # "zh-HK": "üá≠üá∞ Chin√™s (Hong Kong)"
    }

    # --- Dicion√°rio de modelos ---
    modelos = {
        "google/gemini-2.0-pro-exp-02-05:free": {
            "nome": "Gemini Pro",
            "desc": "Modelo mais recente do Google, excelente para an√°lise acad√™mica"
        },
        "cognitivecomputations/dolphin3.0-r1-mistral-24b:free": {
            "nome": "Dolphin Mistral 24B R1",
            "desc": ""
        },
        "openai/o3-mini-high": {
            "nome": "OpenAI O3 Mini High",
            "desc": ""
        },
        "openai/o3-mini": {
            "nome": "OpenAI O3 Mini",
            "desc": ""
        },
        "openai/chatgpt-4o-latest": {
            "nome": "GPT-4 Turbo",
            "desc": "Vers√£o mais atual do GPT-4, com excelente compreens√£o contextual"
        },
        "openai/gpt-4o-mini": {
            "nome": "GPT-4O Mini",
            "desc": ""
        },
        "google/gemini-2.0-flash-001": {
            "nome": "Google Gemini Flash 001",
            "desc": ""
        },
        "google/gemini-2.0-flash-thinking-exp:free": {
            "nome": "Gemini Pro Flash",
            "desc": "Vers√£o otimizada do Gemini Pro, mais r√°pida mas menos detalhada"
        },
        "google/gemini-2.0-flash-lite-preview-02-05:free": {
            "nome": "Google Gemini Flash Lite Preview",
            "desc": ""
        },
        "deepseek/deepseek-r1-distill-llama-70b:free": {
            "nome": "DeepSeek R1 Distill Llama 70B",
            "desc": ""
        },
        "deepseek/deepseek-r1-distill-qwen-32b": {
            "nome": "DeepSeek R1 Distill Qwen 32B",
            "desc": ""
        },
        "deepseek/deepseek-r1:free": {
            "nome": "DeepSeek R1",
            "desc": ""
        },
        "qwen/qwen-plus": {
            "nome": "Qwen Plus",
            "desc": ""
        },
        "qwen/qwen-max": {
            "nome": "Qwen Max",
            "desc": ""
        },
        "qwen/qwen-turbo": {
            "nome": "Qwen Turbo",
            "desc": ""
        },
        "mistralai/codestral-2501": {
            "nome": "Mistralai Codestral 2501",
            "desc": ""
        },
        "mistralai/mistral-small-24b-instruct-2501:free": {
            "nome": "Mistralai Mistral Small 24B Instruct 2501",
            "desc": ""
        },
        "anthropic/claude-3.5-haiku-20241022:beta": {
            "nome": "Claude 3.5 Haiku Beta",
            "desc": ""
        },
        "anthropic/claude-3.5-sonnet": {
            "nome": "Claude 3.5 Sonnet",
            "desc": ""
        },
        "perplexity/sonar-reasoning": {
            "nome": "Perplexity Sonar Reasoning",
            "desc": ""
        },
        "perplexity/sonar": {
            "nome": "Perplexity Sonar",
            "desc": ""
        },
        "perplexity/llama-3.1-sonar-large-128k-online": {
            "nome": "Perplexity Llama 3.1 Sonar Large 128k Online",
            "desc": ""
        }
    }

    # --- Fun√ß√£o para formatar exibi√ß√£o do modelo (opcional) ---
    def modelo_display(model_id):
        status = "Gr√°tis" if model_id.endswith(":free") else "Pago"
        return f"{modelos[model_id]['nome']} - {status}"

    # --- SIDEBAR ---
    with st.sidebar:
        st.markdown("## ‚öôÔ∏è Configura√ß√µes")
        with st.expander("üîç Pesquisa", expanded=True):
            output_lang = st.selectbox(
                "Idioma da Revis√£o",
                options=list(idiomas.keys()),
                format_func=lambda x: idiomas[x],
                help="Selecione o idioma para a revis√£o"
            )
            col_pages, col_titles = st.columns(2)
            with col_pages:
                max_pages = st.number_input(
                    "M√°x. P√°ginas BDTD",
                    min_value=1,
                    value=1,
                    help="N√∫mero m√°ximo de p√°ginas para buscar na BDTD.\nCada p√°gina reorna antre 1 e 20 resultados"
                )
            with col_titles:
                max_titles = st.number_input(
                    "M√°x. T√≠tulos",
                    min_value=1,
                    value=5,
                    help="N√∫mero m√°ximo de t√≠tulos para incluir na revis√£o.\nCuidado com muitos t√≠tulos, pois isso consome muitos tokens!"
                )
        with st.expander("üì• Download"):
            download_pdfs = st.checkbox(
                "Baixar PDFs",
                value=True,
                help="Baixar arquivos PDF"
            )
            scrape_text = st.checkbox(
                "Extrair Texto",
                value=True,
                help="Extrair conte√∫do textual das p√°ginas web"
            )
            debug = st.checkbox(
                "Modo Debug",
                value=False,
                help="Mostrar informa√ß√µes detalhadas"
            )
            output_dir = st.text_input(
                "Diret√≥rio de Sa√≠da",
                value="results",
                help="Diret√≥rio onde os resultados ser√£o salvos"
            )
            st.info("Aten√ß√£o: se a pasta existir, ela ser√° limpa e reutilizada.")
        with st.expander("ü§ñ API e Modelo"):
            st.markdown("""
                Para usar o agente de revis√£o, voc√™ precisa de uma chave da **API OpenRouter**.
                
                - [Criar conta na OpenRouter](https://openrouter.ai/signup)
                - [Ver pre√ßos e cr√©ditos](https://openrouter.ai/pricing)
            """)
            api_key = st.text_input(
                "Chave da OpenRouter",
                type="password",
                value=os.environ.get("OPENROUTER_API_KEY", ""),
                help="Sua chave de API da OpenRouter"
            )
            modelo_selecionado = st.selectbox(
                "Modelo de IA",
                options=list(modelos.keys()),
                format_func=modelo_display,
                help="Selecione o modelo de IA que deseja usar"
            )

    # --- √ÅREA CENTRAL ---
    with st.container():
        st.markdown("""
            <div class="centered-search">
                <div>
                    <h1 style="text-align: center;">
                        Agente de Revis√£o Sistem√°tica de Literatura
                    </h1>
                    <p style="text-align: center; font-size: 1.1rem;">
                        O sistema realiza buscas autom√°ticas na Biblioteca Digital Brasileira de Teses e Disserta√ß√µes (BDTD), processa os resultados usando Intelig√™ncia Artificial (AI) e gera uma revis√£o de literatura estruturada sobre o tema pesquisado.
                    </p>
                </div>
            </div>
        """, unsafe_allow_html=True)

        col_left, col_center, col_right = st.columns([1, 3, 1])
        with col_center:
            research_theme = st.text_input(
                label="Tema de Pesquisa (Uso Interno)",
                placeholder="Insira o Tema de Pesquisa",
                label_visibility="collapsed"
            )
            iniciar = st.button("üöÄ Iniciar Revis√£o", type="primary", use_container_width=True)
            if iniciar:
                if not research_theme:
                    st.error("Por favor, insira um tema de pesquisa")
                elif not api_key:
                    st.error("Por favor, insira sua chave da API OpenRouter")
                else:
                    # Se o diret√≥rio existir, limpar
                    if os.path.exists(output_dir):
                        try:
                            shutil.rmtree(output_dir)
                            os.makedirs(output_dir)
                            st.success(f"Pasta '{output_dir}' limpa e reusada.")
                        except Exception as e:
                            st.error(f"Erro ao limpar a pasta: {str(e)}")
                            st.stop()

                    curiosidades = [
                        "Voc√™ sabia que o primeiro peri√≥dico cient√≠fico surgiu em 1665?",
                        "Atualmente, estima-se que sejam publicados mais de 4 mil artigos cient√≠ficos por dia.",
                        "A revis√£o sistem√°tica ajuda a evitar vieses e a organizar melhor as evid√™ncias dispon√≠veis.",
                        "T√©cnicas de IA aceleram muito o processo de triagem de artigos em revis√µes sistem√°ticas.",
                        "O n√∫mero e (2,71828...) foi descoberto ao estudar juros compostos continuamente.",
                        "A conjectura de Goldbach, que todo n√∫mero par maior que 2 √© soma de dois primos, ainda n√£o foi provada.",
                        "O teorema de Fermat ficou sem prova por mais de 350 anos at√© ser demonstrado em 1995.",
                        "A sequ√™ncia de Fibonacci aparece naturalmente em diversos padr√µes da natureza.",
                        "O zero como n√∫mero s√≥ foi aceito na matem√°tica ocidental no s√©culo XII.",
                        "A constante œÄ j√° foi calculada com mais de 31 trilh√µes de d√≠gitos.",
                        "A teoria do caos come√ßou com o estudo do clima por Edward Lorenz em 1961.",
                        "Existem n√∫meros que s√£o normais, onde todos os d√≠gitos aparecem com igual frequ√™ncia.",
                        "A transformada de Fourier permite decompor qualquer som em ondas senoidais puras.",
                        "O princ√≠pio da incerteza de Heisenberg estabelece limites fundamentais para medi√ß√µes.",
                        "A teoria dos grafos come√ßou com um problema sobre pontes na cidade de K√∂nigsberg.",
                        "O paradoxo dos g√™meos da relatividade especial foi confirmado experimentalmente.",
                        "O m√©todo de Monte Carlo foi desenvolvido durante o Projeto Manhattan.",
                        "A criptografia RSA se baseia na dificuldade de fatorar n√∫meros grandes.",
                        "O algoritmo PageRank do Google √© baseado em √°lgebra linear.",
                        "A dimens√£o fractal pode ser um n√∫mero n√£o inteiro.",
                        "A demonstra√ß√£o das quatro cores levou 1936 configura√ß√µes testadas por computador.",
                        "O teorema fundamental do c√°lculo unifica derivadas e integrais.",
                        "A teoria das categorias unifica diferentes √°reas da matem√°tica.",
                        "A conjectura de Poincar√© s√≥ foi provada em 2003 por Grigori Perelman."
                    ]
                    random.shuffle(curiosidades)

                    # Come√ßa o processo de revis√£o
                    with st.spinner("Preparando o ambiente..."):
                        # Exibimos ‚Äúcuriosidades‚Äù antes (ou durante) ‚Äî mas s√≥ veremos tudo ao final
                        for fact in curiosidades[:1]:
                            st.write(f"**Curiosidade:** {fact}")
                            time.sleep(0.5)

                        try:
                            reviewer = BDTDReviewer(
                                theme=research_theme,
                                output_lang=output_lang,
                                max_pages=max_pages,
                                max_title_review=max_titles,
                                download_pdfs=download_pdfs,
                                scrape_text=scrape_text,
                                output_dir=output_dir,
                                debug=debug,
                                openrouter_api_key=api_key,
                                model=modelo_selecionado
                            )

                            # Agora sim chamamos a l√≥gica de revis√£o
                            with st.spinner("Executando a Revis√£o..."):
                                output_file = reviewer.run()

                            # Conclu√≠do
                            st.session_state.last_review = output_file
                            st.success("Revis√£o conclu√≠da com sucesso!")
                            st.balloons()  # Efeito de bal√µes para dar feedback
                            st.rerun()

                        except Exception as e:
                            st.error(f"Erro durante a revis√£o: {str(e)}")

    # --- ABAS DE RESULTADO ---
    main_container = st.container()
    with main_container:
        tabs = st.tabs(["üìù Revis√£o", "üìö PDFs Baixados"])
        
        # Aba 1: Revis√£o
        with tabs[0]:
            if 'last_review' in st.session_state:
                md_content = load_markdown_file(st.session_state.last_review)
                col1, col2 = st.columns([6, 1])
                with col1:
                    st.markdown(md_content, unsafe_allow_html=True)
                with col2:
                    with open(st.session_state.last_review, 'rb') as f:
                        st.download_button(
                            label="üì• Baixar MD",
                            data=f.read(),
                            file_name="revisao_literatura.md",
                            mime="text/markdown"
                        )
            else:
                # Tenta carregar a revis√£o existente, se houver
                latest_md = sorted(glob.glob(os.path.join(output_dir, "literature_review_*.md")))
                if latest_md:
                    md_content = load_markdown_file(latest_md[-1])
                    col1, col2 = st.columns([6, 1])
                    with col1:
                        st.markdown(md_content, unsafe_allow_html=True)
                    with col2:
                        with open(latest_md[-1], 'rb') as f:
                            st.download_button(
                                "üì• Baixar MD",
                                f.read(),
                                file_name="revisao_literatura.md",
                                mime="text/markdown"
                            )
                else:
                    st.info("üëà Configure sua revis√£o na √°rea central e clique em 'Iniciar Revis√£o' para come√ßar!")
                    st.markdown("""
                        ### Como utilizar?
                        1. Digite o tema da sua pesquisa na barra central.
                        2. Ajuste as op√ß√µes no painel lateral, se desejar.
                        3. Forne√ßa sua chave de API da OpenRouter e escolha seu modelo favorito.
                        4. Clique em **Iniciar Revis√£o** para come√ßar o processo.
                    """)

        # Aba 2: PDFs Baixados
        with tabs[1]:
            if os.path.exists(output_dir):
                pdfs = find_pdfs(output_dir)
                if pdfs:
                    import pandas as pd
                    df = pd.DataFrame(pdfs)
                    df['size'] = df['size'].round(2)
                    df = df.rename(columns={
                        'name': 'Nome do Arquivo',
                        'size': 'Tamanho (MB)',
                        'folder': 'Fonte'
                    })

                    st.markdown("### üìä Estat√≠sticas Gerais")
                    cols = st.columns(3)
                    with cols[0]:
                        st.metric("üìö Total de PDFs", len(pdfs))
                    with cols[1]:
                        st.metric("üíæ Tamanho Total", f"{df['Tamanho (MB)'].sum():.2f} MB")
                    with cols[2]:
                        st.metric("üèõÔ∏è Fontes √∫nicas", df['Fonte'].nunique())

                    st.markdown("### üìÇ Arquivos por Pasta")
                    folders = {}
                    for pdf in pdfs:
                        folder_path = os.path.dirname(pdf['path'])
                        folder_name = os.path.basename(folder_path)
                        if folder_name not in folders:
                            folders[folder_name] = {
                                'pdfs': [],
                                'total_size': 0,
                                'path': folder_path
                            }
                        folders[folder_name]['pdfs'].append(pdf)
                        folders[folder_name]['total_size'] += pdf['size']
                    
                    for folder_name, folder_info in sorted(folders.items()):
                        with st.expander(f"üìÅ {folder_name} ({len(folder_info['pdfs'])} arquivos, {folder_info['total_size']:.2f} MB)"):
                            folder_df = pd.DataFrame(folder_info['pdfs'])
                            folder_df['size'] = folder_df['size'].round(2)
                            folder_df = folder_df.rename(columns={
                                'name': 'Nome do Arquivo',
                                'size': 'Tamanho (MB)'
                            })
                            st.dataframe(folder_df[['Nome do Arquivo', 'Tamanho (MB)']], hide_index=True)
                            st.markdown("#### Downloads")
                            for pdf_info in folder_info['pdfs']:
                                st.markdown(
                                    f"- {get_pdf_download_link(pdf_info['path'])} ({pdf_info['size']:.2f} MB)",
                                    unsafe_allow_html=True
                                )
                            if st.button(f"üîç Abrir Pasta no Explorador", key=f"open_{folder_name}"):
                                try:
                                    if os.name == 'nt':
                                        subprocess.run(['explorer', folder_info['path']])
                                    elif platform.system() == 'Darwin':
                                        subprocess.run(['open', folder_info['path']])
                                    else:
                                        subprocess.run(['xdg-open', folder_info['path']])
                                except Exception as e:
                                    st.error("N√£o foi poss√≠vel abrir a pasta")
                else:
                    st.info("Nenhum PDF baixado ainda. Habilite o download de PDFs nas configura√ß√µes e inicie uma revis√£o.")
            else:
                st.info("O diret√≥rio de sa√≠da ainda n√£o existe. Inicie uma revis√£o para cri√°-lo.")


if __name__ == "__main__":
    main()
